
https://blog.csdn.net/briblue/article/details/85101144


---thread的讲解
https://blog.csdn.net/briblue/article/details/85101144
threading 模块中最核心的内容是 Thread 这个类。

我们要创建 Thread 对象,然后让它们运行，每个 Thread 对象代表一个线程，在每个线程中我们可以让程序处理不同的任务，这就是多线程编程。

值得注意的是，程序运行时默认就是在主线程上

创建 Thread 对象有 2 种手段。

直接创建 Thread ，将一个 callable 对象从类的构造器传递进去，这个 callable 就是回调函数，用来处理任务。
编写一个自定义类继承 Thread，然后复写 run() 方法，在 run() 方法中编写任务处理代码，然后创建这个 Thread 的子类。
————————————————





---Python中Thread类的start()和run()方法的区别
https://blog.csdn.net/chenpkai/article/details/70943609

start()方法
开始线程活动。
每一个线程对象来说start()只能被调用一次，start()安排其对象在一个另外的单独线程中调用run()（而非当前所处线程）。

当该方法在同一个线程对象中被调用超过一次时，会引入RuntimeError(运行时错误)。

run()方法
代表了线程活动的方法。
你可以在子类中重写此方法。标准run()方法调用了传递给对象的构造函数的可调对象作为目标参数，如果有这样的参数的话，顺序和关键字参数分别从args和kargs取得。

---join（） & setdaemon（）
讲得非常到位
https://www.cnblogs.com/alan-babyblog/p/5325071.html
join ()方法：主线程A中，创建了子线程B，并且在主线程A中调用了B.join()，那么，主线程A会在调用的地方等待，直到子线程B完成操作后，才可以接着往下执行，那么在调用这个线程时可以使用被调用线程的join方法。
setdaemon():并且在主线程A中调用了B.setDaemon(),这个的意思是，把主线程A设置为守护线程，这时候，要是主线程A执行结束了，就不管子线程B是否完成,一并和主线程A退出.



import threading 
import time 
class MyThread(threading.Thread): 
        def __init__(self,id): 
                threading.Thread.__init__(self) 
                self.id = id 
        def run(self): 
                x = 0 
                time.sleep(10) 
                print self.id 
    
if __name__ == "__main__": 
        t1=MyThread(999) 
        t1.start() 
        t1.join() 
        for i in range(5): 
                print i 
                
---
import threading 
import time 
class MyThread(threading.Thread): 
        def __init__(self,id): 
                threading.Thread.__init__(self) 
        def run(self): 
                time.sleep(5) 
                print "This is " + self.getName() 
    
if __name__ == "__main__": 
        t1=MyThread(999) 
        t1.setDaemon(True) 
        t1.start() 
        print "I am the father thread." 
